#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# xml - Manage bits and pieces of XML files
#
# Copyright 2014, Red Hat, Inc.
# Tim Bielawa <tbielawa@redhat.com>
# Magnus Hedemark <mhedemar@redhat.com>
#
# This software may be freely redistributed under the terms of the GNU
# general public license version 2.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


######################################################################
# Copied the Nagios module over so we have a starting template
######################################################################



DOCUMENTATION = '''
---
module: xml
short_description: Manage bits and pieces of XML files
description:
  - A CRUD-like interface to managing bits of XML flies.
version_added: "1.0"
options:
  file:
    description:
      - Path to the file to operate on. File must exist ahead of time.
    required: true
    default: null
    choices: []
  xpath:
    description:
      - A valid XPath expression describing the item(s) you want to manipulate. Operates on the document root, C(/), by default.
    required: false
    default: /
    choices: []
  ensure:
    description:
      - Set or remove an element
    required: false
    default: present
    choices:
      - "absent"
      - "present"
  value:
    description:
      - Desired state of the selected element/attribute. Either a string, or to unset a value, the Python C(None) keyword (YAML Equivalent, C(null)).
    required: false
    default: Elements default to no value (but present). Attributes default to an empty string.
    choices: []
  children:
    description:
      - Define the child-element(s) of a selected element. Children elements may be given in several forms. A single string (ex C(children=ansible) to add a C(<ansible/>) child element), A single hash where the key is an element name and the value is the element value, or a list of a combination of strings and hashes.
    required: false
    default: null
    choices: []
requirements:
    - The remote end must have the Python C(lxml) library installed
author: Tim Bielawa, Magnus Hedemark
# examples:
#     - description: set 30 minutes of apache downtime
#       code: nagios action=downtime minutes=30 service=httpd host=$inventory_hostname
#     - description: schedule an hour of HOST downtime
#       code: nagios action=downtime minutes=60 service=host host=$inventory_hostname
#     - description: schedule downtime for a few services
#       code: nagios action=downtime services=frob,foobar,qeuz host=$inventory_hostname
#     - description: enable SMART disk alerts
#       code: nagios action=enable_alerts service=smart host=$inventory_hostname
#     - description: "two services at once: disable httpd and nfs alerts"
#       code: nagios action=disable_alerts service=httpd,nfs host=$inventory_hostname
#     - description: disable HOST alerts
#       code: nagios action=disable_alerts service=host host=$inventory_hostname
#     - description: silence ALL alerts
#       code: nagios action=silence host=$inventory_hostname
#     - description: unsilence all alerts
#       code: nagios action=unsilence host=$inventory_hostname
'''

"""
examples

Given:

   <?xml version='1.0' encoding='UTF-8'?>
   <business type="bar">
       <name>Tasty Beverage Co.</name>
       <beers>
           <beer>Rochefort 10</beer>
           <beer>St. Bernardus Abbot 12</beer>
           <beer>Schlitz</beer>
       </beers>
       <rating subjective="true">10</rating>
       <website>
           <mobilefriendly />
           <address>http://tastybeverageco.com</address>
       </website>
   </business>


# Remove the 'subjective' attribute of the rating element
xml: file=/foo/bar.xml xpath=/business/rating/@subjective ensure=absent

# Set the rating to 11
xml: file=/foo/bar.xml xpath=/business/rating value=11

# Add a phonenumber element to the business element
# Implicit 'mkdir -p' behavior where applicable (parent xml nodes created automatically)
xml: file=/foo/bar.xml xpath=/business/phonenumber value=555-555-1234

"""
######################################################################


def main():

    module = AnsibleModule(
        argument_spec=dict(
            action=dict(required=True, default=None, choices=ACTION_CHOICES),
            author=dict(default='Ansible'),
            host=dict(required=True, default=None),
            minutes=dict(default=30),
            cmdfile=dict(default=which_cmdfile()),
            services=dict(default=None, aliases=['service']),
            )
        )

    action = module.params['action']
    minutes = module.params['minutes']
    services = module.params['services']
    cmdfile = module.params['cmdfile']

    ##################################################################
    # Required args per action:
    # downtime = (minutes, service, host)
    # (un)silence = (host)
    # (enable/disable)_alerts = (service, host)
    #
    # AnsibleModule will verify most stuff, we need to verify
    # 'minutes' and 'service' manually.

    ##################################################################
    if action == 'downtime':
        # Make sure there's an actual service selected
        if not services:
            module.fail_json(msg='no service selected to set downtime for')
        # Make sure minutes is a number
        try:
            m = int(minutes)
            if not isinstance(m, types.IntType):
                module.fail_json(msg='minutes must be a number')
        except:
            module.fail_json(msg='invalid entry for minutes')

    ##################################################################
    if action in ['enable_alerts', 'disable_alerts']:
        if not services:
            module.fail_json(msg='a service is required when setting alerts')

    ##################################################################
    if not cmdfile:
        module.fail_json('unable to locate nagios.cfg')

    ##################################################################
    ansible_nagios = Nagios(module, **module.params)
    ansible_nagios.act()
    ##################################################################



######################################################################
# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
